Immutability:
-an immutable object is an object whose state cannot be modified after it is created
-number, booleans and strings are immutable (primitive types)
-objects, arrays, functions, classes, sets and maps are mutable (reference types)

Predictability:
-do away with side-effects

Mutation Tracking:
-provide the ability to see all changes to our application over time

Redux and Immutability:
-large applications
-Redux has a single immutable state tree (referred to as the store) where all state changes are explicitly handled by dispatching actions. Dispatched actions are processed by a reducer that accepts the previous state and the action and returns the next state of your application. It is easy to predict how the state tree is going to change based on actions that are dispatched. It is also easy to predict which action will be dispatched based on some event or interaction. This all leads to very predictable state management.